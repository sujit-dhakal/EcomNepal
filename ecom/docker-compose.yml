services:
  django-app:
    container_name: django-app
    build:
      dockerfile: Dockerfile
      context: ./backend
    ports:
      - 8000:8000
    env_file:
      - .env
    command: python manage.py runserver 0.0.0.0:8000
    depends_on:
      - postgres
      - redis
      - celery
    volumes:
      - ./backend:/app

  next-app:
    container_name: next-app
    build:
      context: ./frontend/ecommerce
      dockerfile: Dockerfile
    ports:
      - 3000:3000
    environment:
      - NEXT_PUBLIC_CLIENT_ID=${NEXT_PUBLIC_CLIENT_ID}
    command: npm run dev
    volumes:
      - ./frontend/ecommerce:/app
      - /app/node_modules

  postgres:
    container_name: postgres
    image: postgres:latest
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - 5434:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    container_name: redis
    image: redis
    ports:
      - 6379:6379

  celery:
    container_name: celery
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A ecommerce worker -l INFO
    volumes:
      - ./backend:/app
    depends_on:
      - redis
    env_file:
      - .env

  chatbot:
    container_name: chatbot
    build:
      dockerfile: Dockerfile
      context: ./fastapi
    ports:
      - 8080:8080
    env_file:
      - .env
    volumes:
      - ./fastapi:/app

volumes:
  postgres_data:
